#!/usr/bin/env php
<?php

/**
 * Task Tracker
 * 
 * @version 1.0
 */

const HELP_MESSAGE = PHP_EOL . "Usage: task-tracker <command>
    Commands: 
        add \"task description\" - Create a new task
        list [todo|in-progress|done] - List tasks
        mark id [todo|in-progress|done] - Mark task as done, in-progress or todo
        update id \"new task description\" - Update task description
        prune - Prune all tasks with 'done' status
        delete id - Delete task
        help - Show this help message" . PHP_EOL;

const DATA_DIR = __DIR__ . DIRECTORY_SEPARATOR . "data";
const TASKS_JSON = DATA_DIR . DIRECTORY_SEPARATOR . "tasks.json";

const STATUS = [
    "todo",
    "in-progress",
    "done"
];

function findTask(array $tasks, $id): stdClass
{
    return array_find($tasks, fn($task) => $id == $task->id) ?: throw new Exception("Task not found");
}

function getTasks(): array
{
    return json_decode(file_get_contents(TASKS_JSON)) ?: [];
}

function saveTasks($tasks): bool
{
    return file_put_contents(TASKS_JSON, json_encode(array_values($tasks))) ?: throw new Exception("Unable to save tasks");
}

function addTask(string $description): void
{
    $tasks = getTasks();
    $lastId = empty($tasks) ? null : $tasks[array_key_last($tasks)]->id;

    $task = new stdClass();
    $task->id = $lastId ? $lastId + 1 : 1;
    $task->description = $description;
    $task->status = "todo";
    $task->createdAt = date("Y-m-d H:i:s");
    $task->updatedAt = $task->createdAt;

    array_push($tasks, $task);

    saveTasks($tasks);
}

function checkStatus(string $status): void
{
    if (!in_array($status, STATUS)) {
        throw new Exception("Invalid status. Check the 'help' command", 1);
        exit;
    }
}

function listTasks(?string $status)
{
    $tasks = getTasks();

    if (!is_null($status) && !empty($tasks)) {
        checkStatus($status);
        $tasks = array_filter($tasks, fn($task) => $task->status == $status);
    }

    if (empty($tasks)) {
        echo "No tasks found" . PHP_EOL;
        exit;
    }

    echo " # | Description | Status | Created At | Updated At " . PHP_EOL;

    sort($tasks);

    array_walk($tasks, function ($task) {
        echo " $task->id | $task->description | $task->status | $task->createdAt | $task->updatedAt " . PHP_EOL;
    });
}

function markTask(int $id, string $status): void
{
    checkStatus($status);

    $tasks = getTasks();
    $task = findTask($tasks, $id);
    $task->status = $status;
    $task->updatedAt = date("Y-m-d H:i:s");

    saveTasks($tasks);
}

function updateTask(int $id, string $description): void
{
    $tasks = getTasks();
    $task = findTask($tasks, $id);
    $task->description = $description;
    $task->updatedAt = date("Y-m-d H:i:s");

    saveTasks($tasks);
}

function pruneTasks(): void
{
    $tasks = array_filter(getTasks(), fn($task) => $task->status !== "done");

    saveTasks($tasks);
}

function deleteTask(int $id): void
{
    $tasks = getTasks();
    $task = findTask($tasks, $id);

    unset($tasks[array_search($task, $tasks)]);

    saveTasks($tasks);
}

function main($argc, $argv)
{
    if ($argc < 2) {
        echo HELP_MESSAGE;
        exit;
    }

    if (!is_dir(DATA_DIR)) {
        mkdir(DATA_DIR);
    }

    if (!file_exists(TASKS_JSON)) {
        file_put_contents(TASKS_JSON, "");
    }

    switch ($argv[1]) {
        case "add":
            $description = array_key_exists(2, $argv) ? $argv[2] :
                throw new Exception("No description for the task was provided", 1);
            addTask($description);
            echo "Task '$description' was added successfully" . PHP_EOL;
            break;
        case "list":
            $status = array_key_exists(2, $argv) ? $argv[2] : null;
            listTasks($status);
            break;
        case "mark":
            $id = array_key_exists(2, $argv) ? $argv[2] :
                throw new Exception("No task ID was provided", 1);
            $status = array_key_exists(3, $argv) ? $argv[3] :
                throw new Exception("No status was provided", 1);
            markTask($id, $status);
            echo "Task was marked with $status successfully" . PHP_EOL;
            break;
        case "update":
            $id = array_key_exists(2, $argv) ? $argv[2] :
                throw new Exception("No task ID was provided", 1);
            $description = array_key_exists(3, $argv) ? $argv[3] :
                throw new Exception("No description was provided", 1);
            updateTask($id, $description);
            echo "Task $id was updated with '$description' successfully" . PHP_EOL;
            break;
        case "prune":
            pruneTasks();
            echo "All 'done' tasks pruned" . PHP_EOL;
            break;
        case "delete":
            $id = array_key_exists(2, $argv) ? $argv[2] :
                throw new Exception("No task ID was provided", 1);
            deleteTask($id);
            echo "Task $id was deleted successfully" . PHP_EOL;
            break;
        case "help":
            echo HELP_MESSAGE;
            break;
        default:
            echo "Invalid command" . PHP_EOL;
            echo HELP_MESSAGE;
            break;
    }
}

try {
    main($argc, $argv);
    exit;
} catch (Throwable $e) {
    echo $e->getMessage() . PHP_EOL;
    exit($e->getCode());
}
